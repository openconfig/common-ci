name: Basic Go

permissions: {}

on:
  workflow_call:
    inputs:
      go-versions:
        type: string
        # Arrays are currently not accepted:
        # https://github.com/orgs/community/discussions/11692
        default: "['stable' , 'oldstable']"
      staticcheck-version:
        type: string
        default: "latest"
      static-analysis-excludes-regex:
        type: string
      # TODO(wenvous): gofmt is harder to work with since it always recursively
      # formats files instead of restricting itself to just listed packages.
      # See if there is a way to have the same behaviour without relying on the
      # tool.
      tests-excludes-regex:
        type: string
        description: "grep -E regex for excluding certain packages from testing"
      race-tests-excludes-regex:
        type: string
        description: "grep -E regex for excluding certain packages from race testing, this DOES NOT include packages excluded from regular testing"
      coverage-excludes-regex:
        type: string
        description: "grep -E regex for excluding certain packages from coverage reporting"
      skip-gofmt:
        type: boolean
      skip-govet:
        type: boolean
      skip-staticcheck:
        type: boolean
      skip-race-tests:
        type: boolean
      install-additional-apt-packages:
        type: string
        description: "apt-get install additional apt packages"

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go: ${{ fromJson(inputs.go-versions) }}
    permissions:
      contents: read

    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: ${{ matrix.go }}
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Install additional dependencies
        env:
          # Pass the input as an environment variable
          APT_PACKAGES: ${{ inputs.install-additional-apt-packages }}
        run: |
          if [ -n "${APT_PACKAGES}" ]; then
            echo "Installing additional packages"
            sudo apt-get install "${APT_PACKAGES}"
          fi

      - name: Build packages
        run: go build -v ./...

      - name: Run Tests
        env:
          # Pass the input as an environment variable
          EXCLUDES_REGEX: ${{ inputs.tests-excludes-regex }}
        run: |
          if [ -z "${EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            go test -v ./...
          else
            echo "Running for non-excluded packages"
            go test -v $(go list ./... | grep -E -v "${EXCLUDES_REGEX}")
          fi

      - name: Run race tests
        if: ${{ !inputs.skip-race-tests }}
        env:
          RACE_EXCLUDES_REGEX: ${{ inputs.race-tests-excludes-regex }}
        run: |
          if [ -z "${RACE_EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            go test -race -v ./...
          else
            echo "Running for non-excluded packages"
            go test -race -v $(go list ./... | grep -E -v "${RACE_EXCLUDES_REGEX}")
          fi

  static_analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      # For goveralls to submit coverage
      statuses: write

    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: "stable"
        id: go

      - name: Get dependencies
        run: |
          go mod download

      - name: Install additional dependencies
        env:
          # Pass the input as an environment variable
          APT_PACKAGES: ${{ inputs.install-additional-apt-packages }}
        run: |
          if [ -n "${APT_PACKAGES}" ]; then
            echo "Installing additional packages"
            sudo apt-get install "${APT_PACKAGES}"
          fi

      - name: Go Mod should be tidy
        run: |
          go mod tidy
          diff -u <(echo -n) <(git diff)

      - name: Go vet
        if: ${{ !cancelled() && !inputs.skip-govet }}
        env:
          STATIC_EXCLUDES_REGEX: ${{ inputs.static-analysis-excludes-regex }}
        run: |
          if [ -z "${STATIC_EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            go vet ./...
          else
            echo "Running for non-excluded packages"
            go vet $(go list ./... | grep -E -v "${STATIC_EXCLUDES_REGEX}")
          fi

      - name: revive
        if: ${{ !cancelled() }}
        env:
          STATIC_EXCLUDES_REGEX: ${{ inputs.static-analysis-excludes-regex }}
        run: |
          go install github.com/mgechev/revive@latest
          if [ -z "${STATIC_EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            revive ./...
          else
            echo "Running for non-excluded packages"
            revive $(go list ./... | grep -E -v "${STATIC_EXCLUDES_REGEX}")
          fi

      - name: Gofmt
        if: ${{ !cancelled() && !inputs.skip-gofmt }}
        run: |
          diff -u <(echo -n) <(gofmt -d -s .)

      - name: Run coverage
        # Always run unless manually cancelled.
        if: ${{ !cancelled() }}
        env:
          COVERAGE_EXCLUDES_REGEX: ${{ inputs.coverage-excludes-regex }}
        run: |
          if [ -z "${COVERAGE_EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            go test -v -coverprofile=profile.cov ./...
          else
            echo "Running for non-excluded packages"
            go test -v -coverprofile=profile.cov $(go list ./... | grep -E -v "${COVERAGE_EXCLUDES_REGEX}")
          fi

      - name: Install goveralls
        if: ${{ !cancelled() }}
        run: go install github.com/mattn/goveralls@latest

      - name: Submit coverage
        if: ${{ !cancelled() }}
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=profile.cov -service=github

  staticcheck:
    name: staticcheck
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Check out code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          persist-credentials: false

      - name: Install Go
        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6
        with:
          go-version: "stable"
        id: go

      - name: Install staticcheck
        if: ${{ !cancelled() }}
        env:
          STATICCHECK_VERSION: ${{ inputs.staticcheck-version }}
        run: |
          go install honnef.co/go/tools/cmd/staticcheck@"${STATICCHECK_VERSION}"

      - name: Cache for staticcheck
        if: ${{ !cancelled() && !inputs.skip-staticcheck }}
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: |
            ${{ runner.temp }}/staticcheck
          key: ${{ github.job }}-${{ steps.go.outputs.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ github.job }}-${{ steps.go.outputs.go-version }}-${{ hashFiles('**/go.sum') }}

      - name: Install additional dependencies
        env:
          APT_PACKAGES: ${{ inputs.install-additional-apt-packages }}
        run: |
          if [ -n "${APT_PACKAGES}" ]; then
            echo "Installing additional packages"
            sudo apt-get install "${APT_PACKAGES}"
          fi

      - name: Staticcheck
        if: ${{ !cancelled() && !inputs.skip-staticcheck }}
        env:
          STATIC_EXCLUDES_REGEX: ${{ inputs.static-analysis-excludes-regex }}
        run: |
          export STATICCHECK_CACHE="${{ runner.temp }}/staticcheck"
          if [ -z "${STATIC_EXCLUDES_REGEX}" ]; then
            echo "Running for all packages"
            GOGC=30 staticcheck ./...
          else
            echo "Running for non-excluded packages"
            GOGC=30 staticcheck $(go list ./... | grep -E -v "${STATIC_EXCLUDES_REGEX}")
          fi
